#!/usr/bin/env bash
#
# Usage: sign_xpi.sh -t <token> -p <path-to-xpi>
#
#          -t : JWT token generated by get_token.sh, like: "ABCD..."
#          -p : Path to uploading XPI, like "./path/to/file.xpi"
#
#          -k : key aka JWT issuer, like "user:xxxxxx:xxx"
#          -s : JWT secret, like "0123456789abcdef..."
#          -e : seconds to expire the token
#
# See also: https://blog.mozilla.org/addons/2015/11/20/signing-api-now-available/

case $(uname) in
  Darwin|*BSD|CYGWIN*) sed="sed -E" ;;
  *)                   sed="sed -r" ;;
esac

while getopts t:p:k:s:e: OPT
do
  case $OPT in
    "t" ) token="$OPTARG" ;;
    "p" ) xpi="$OPTARG" ;;
    "k" ) key="$OPTARG" ;;
    "s" ) secret="$OPTARG" ;;
    "e" ) expire="$OPTARG" ;;
  esac
done

if [ "$token" = "" ]
then
  token=$(./get_token.sh -k $key -s $secret -e $expire)
  [ "$token" = "" ] && exit 1
fi

[ "$token" = "" ] && echo 'You must specify a JWT token via "-t"' 1>&2 && exit 1
[ "$xpi" = "" ] && echo 'You must specify a path to XPI via "-p"' 1>&2 && exit 1

install_rdf=$(unzip -p $xpi install.rdf)

extract_initial_em_value() {
  echo "$install_rdf" | \
    grep "em:$1" | head -n 1 | \
    $sed -e "s/.*em:$1=['\"]([^'\"]+).+/\1/" \
         -e "s/.*<em:$1>([^<]+).+/\1/"
}

id=$(extract_initial_em_value id)
version=$(extract_initial_em_value version)

response=$(curl "https://addons.mozilla.org/api/v3/addons/$id/versions/$version/" \
             -s \
             -D - \
             -H "Authorization: JWT $token" \
             -g -XPUT --form "upload=@$xpi")

if echo "$response" | grep -E '"signed"\s*:\s*true'
then
  ./download_signed_xpi.sh -t "$token" -i "$id" -v "$version"
  exit 0
else
  echo "Not signed yet. You must retry downloading after signed." 1>&2
  exit 1
fi
