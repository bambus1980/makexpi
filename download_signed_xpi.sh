#!/usr/bin/env bash
#
# Usage: sign_xpi.sh -t <token> -i <addon-id> -v <version>
#
#          -t : JWT token generated by get_token.sh, like: "ABCD..."
#          -i : Addon ID, like: "myaddon@example.com"
#          -v : Version, like: "1.1"
#
#          -k : key aka JWT issuer, like "user:xxxxxx:xxx"
#          -s : JWT secret, like "0123456789abcdef..."
#          -e : seconds to expire the token
#
# See also: https://blog.mozilla.org/addons/2015/11/20/signing-api-now-available/

case $(uname) in
  Darwin|*BSD|CYGWIN*) sed="sed -E" ;;
  *)                   sed="sed -r" ;;
esac

while getopts t:i:v:k:s:e: OPT
do
  case $OPT in
    "t" ) token="$OPTARG" ;;
    "i" ) id="$OPTARG" ;;
    "v" ) version="$OPTARG" ;;
    "k" ) key="$OPTARG" ;;
    "s" ) secret="$OPTARG" ;;
    "e" ) expire="$OPTARG" ;;
  esac
done

if [ "$token" = "" ]
then
  token=$(./get_token.sh -k "$key" -s "$secret" -e "$expire")
  [ "$token" = "" ] && exit 1
fi

[ "$token" = "" ] && echo 'You must specify a JWT token via "-t"' 1>&2 && exit 1
[ "$id" = "" ] && echo 'You must specify the addon ID via "-i"' 1>&2 && exit 1
[ "$version" = "" ] && echo 'You must specify the addon ID via "-v"' 1>&2 && exit 1

response=$(curl "https://addons.mozilla.org/api/v3/addons/$id/versions/$version/" \
             -H "Authorization: JWT $token")

if echo "$response" | grep -E '"signed"\s*:\s*true'
then
  uri=$(echo "$response" | $sed -e 's/.+"download_url"\s*:\s*"([^"]+).+/\1/')
  curl "$uri" -o "$id-$version-signed.xpi"
  exit 0
else
  echo "Not signed yet." 1>&2
  exit 1
fi

